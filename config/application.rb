# frozen_string_literal: true

require_relative 'boot'

require 'rails/all'

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

class AppProfilerAuthorizedMiddleware < AppProfiler::Middleware
  def before_profile(env, _params)
    request = ActionDispatch::Request.new(env)
    session_name = Rails.application.config.session_options[:key]
    uid = request.cookie_jar.encrypted[session_name]["account_uid"]

    Account.find_by(uid: uid)&.admin?
  end
end

module AppProfiler
  module Storage
    class S3Storage < BaseStorage
      class << self
        # This returns Aws::S3::Errors::AccessDenied: Access Denied
        # Probably need another bucket for this things.
        def upload(profile, _params = {})
          file = profile.file.open

          ActiveSupport::Notifications.instrument(
            "s3_upload.app_profiler",
            file_size: file.size
          ) do
            response = client.put_object(
              acl: "public-read",
              body: StringIO.new(gzipped_reader(file).read),
              bucket: "advisable-app-prd",
              key: "profiling/#{filename(profile)}"
            )
            # figure out what to do with this.
            # it needs to return _something_ that responds to URL
            # but can't test it without permissions
            response
          end
        end

        private

        def filename(profile)
          File.join(profile.context.to_s, profile.file.basename)
        end

        def client
          Aws::S3::Client.new(region: "eu-west-1")
        end

        # We could compress everything at once using `ActiveSupport::Gzip.compress`.
        # Since we expect large files for profiles generated by stackprof,
        # compressing in chunks avoids keeping all of them in memory.
        def gzipped_reader(file)
          reader, writer = IO.pipe(binmode: true)
          Thread.new do
            writer.set_encoding("binary")
            gz = Zlib::GzipWriter.new(writer)
            # Default chunk size for gzip is 16384.
            gz.write(file.read(16384)) until file.eof?
            gz.close
          end
          reader
        end
      end
    end
  end
end

module Advisable
  class Application < Rails::Application
    ORIGIN_HOST = ENV['ORIGIN'] || "https://#{ENV['HEROKU_APP_NAME']}.herokuapp.com"
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults(6.1)
    config.add_autoload_paths_to_load_path = false

    config.active_job.queue_adapter = :sidekiq
    config.action_mailer.default_url_options = {host: ORIGIN_HOST}
    config.action_mailer.asset_host = ORIGIN_HOST
    config.action_mailer.preview_path = Rails.root.join("test/mailers/previews")
    config.action_mailbox.ingress = :sendgrid
    config.assets.paths << Rails.root.join("app/assets/fonts")

    config.skylight.probes += %w[redis graphql faraday]

    config.app_profiler.autoredirect = true
    config.app_profiler.middleware = AppProfilerAuthorizedMiddleware
    # Turn this on if you want to test s3 uploads in development
    # config.app_profiler.middleware_action = AppProfiler::Middleware::UploadAction
    config.app_profiler.storage = AppProfiler::Storage::S3Storage

    # Do not load log_data columns unless needed
    config.logidze.ignore_log_data_by_default = true
  end
end
